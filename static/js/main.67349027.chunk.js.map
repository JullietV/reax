{"version":3,"sources":["assets/img/woman.jpg","assets/img/mountain.jpg","components/Input/Input.jsx","components/Button/Button.jsx","components/Login/Login.jsx","components/SignIn/SignIn.jsx","components/Credits/Credits.jsx","components/Auth/Auth.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Input","props","className","name","value","type","onChange","onInputChange","placeholder","Button","text","Login","useState","user","setUser","password","setPassword","event","persist","target","SignIn","inputs","setInputs","handleInputChange","email","confirmEmail","confirmPassword","Credits","href","src","alt","Auth","action","setAction","style","backgroundImage","pinkWoman","mountain","getBackground","Container","fluid","Row","Col","xs","md","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67349027.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/woman.e742ffb7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mountain.d71843a9.jpg\";","import React from 'react'\nimport './Input.scss'\n\nconst Input = (props) => {\n    return (\n        <input \n        className=\"reax-input\"\n        name={props.name} \n        value={props.value} \n        type={props.type}\n        onChange={props.onInputChange}\n        placeholder={props.placeholder}/>\n    );\n}\n\nexport default Input;","import React from 'react';\nimport './Button.scss'\n\nconst Button = (props) => {\n    return (\n        <button className=\"reax-btn\">\n            {props.text}\n        </button>\n    );\n}\n\nexport default Button;","import React, {useState} from 'react';\nimport './Login.scss'\n\nimport Input from '../Input/Input'\nimport Button from '../Button/Button'\n\nconst Login = () => {\n    const [user, setUser] = useState('');\n    const [password, setPassword] = useState('');\n    \n    const handleUserChange = (event) => {\n        event.persist();\n        setUser(event.target.value);\n    };\n\n    const handlePasswordChange = (event) => {\n        event.persist();\n        setPassword(event.target.value);\n    };\n\n    return (\n        <div className=\"reax-login\">\n            <h1>Inicia sesión</h1>\n            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. \n            Consequuntur aliquam perferendis, vitae neque quia enim facere accusamus, \n            numquam est voluptate voluptatibus dolores sed officiis, beatae a asperiores unde debitis quas.</p>\n            <Input \n            placeholder=\"Usuario\" \n            value={user} \n            type=\"text\"\n            onInputChange={handleUserChange}></Input>\n            <Input\n            placeholder=\"Contraseña\"\n            value={password} \n            type=\"password\"\n            onInputChange={handlePasswordChange}\n            ></Input>\n            <Button text=\"Iniciar sesión\"></Button>\n        </div>\n    );\n}\n\nexport default Login;\n\n","import React, {useState} from 'react'\nimport './SignIn.scss'\n\nimport Input from '../Input/Input'\nimport Button from '../Button/Button'\n\nconst SignIn = () => {\n    const [inputs, setInputs] = useState({})\n\n    const handleInputChange = (event) => {\n        event.persist();\n        setInputs(inputs => ({...inputs, [event.target.name]: event.target.value}));\n    }\n\n\n    return (\n        <div className=\"reax-sign-in\">\n            <h1>Registrate</h1>\n            <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Saepe, impedit? Adipisci voluptatem fugiat voluptatum at, necessitatibus id impedit molestiae, eius perspiciatis porro omnis magni laborum unde quidem obcaecati ad? Totam.</p>\n            <Input\n            type=\"text\"\n            placeholder=\"Usuario\"\n            value={inputs.user}\n            name=\"user\"\n            onInputChange={handleInputChange}\n            ></Input>\n            <Input\n            type=\"mail\"\n            placeholder=\"Email\"\n            value={inputs.email}\n            name=\"email\"\n            onInputChange={handleInputChange}\n            ></Input>\n            <Input\n            type=\"mail\"\n            placeholder=\"Confirmar email\"\n            value={inputs.confirmEmail}\n            name=\"confirmEmail\"\n            onInputChange={handleInputChange}\n            ></Input>\n            <Input\n            type=\"password\"\n            placeholder=\"Contraseña\"\n            value={inputs.password}\n            name=\"password\"\n            onInputChange={handleInputChange}\n            ></Input>\n            <Input\n            type=\"password\"\n            placeholder=\"Confirmar contraseña\"\n            value={inputs.confirmPassword}\n            name=\"confirmPassword\"\n            onInputChange={handleInputChange}\n            ></Input>\n\n            <Button text=\"Registrate\"></Button>\n        </div>\n    )\n}\n\nexport default SignIn;","import React from 'react';\nimport './Credits.scss'\n\nconst Credits = () => {\n    return (\n        <div className=\"julls-app-credits\">\n            <a href=\"http://instagram.com/jullietv\" target=\"_blank\">\n            <img src=\"https://assets.gitlab-static.net/uploads/-/system/user/avatar/536046/avatar.png?width=90\" alt=\"Jullietv\"/>\n            </a>\n        </div>\n    )\n}\n\nexport default Credits;","import React, {useState} from 'react';\nimport './Auth.scss';\n\nimport { Container, Row, Col } from 'reactstrap';\nimport Login from '../Login/Login';\nimport SignIn from '../SignIn/SignIn';\nimport Credits from '../Credits/Credits';\nimport pinkWoman from '../../assets/img/woman.jpg';\nimport mountain from '../../assets/img/mountain.jpg';\n\nconst Auth = () => {\n    const [action, setAction] = useState('register')\n\n    const getBackground = (action) => {\n        if (action === 'login')\n        return pinkWoman;\n        \n        return mountain;\n    }\n\n    return (\n        <div className=\"reax-auth\" style={{backgroundImage: `url(${getBackground(action)})`}}>\n            <Container fluid>\n                <Row>\n                    <Col xs=\"12\" md=\"6\" className=\"reax-auth-wrapper\">\n                        <div className=\"reax-auth-selection-type\">\n                            <a onClick={() => setAction('login')} className={action === 'login' ? 'active' : ''}>Iniciar sesión</a>\n                            <a onClick={() => setAction('register')} className={action === 'register' ? 'active' : ''}>Registrarse</a>\n                        </div>\n                        <div className=\"reax-auth-form\">\n                            {action === 'login' ? <Login></Login> : <SignIn></SignIn>}\n                        </div>\n                        <div className=\"reax-auth-footer\">\n                            <Credits></Credits>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default Auth;","import React from 'react';\nimport './App.scss';\n\nimport Auth from './components/Auth/Auth';\n\nfunction App() {\n  return (\n    <div className=\"reax-app\">\n      <Auth></Auth>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}